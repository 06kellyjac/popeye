// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/derailed/popeye/internal/linter (interfaces: Konfig)

package linter

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockKonfig struct {
	fail func(message string, callerSkip ...int)
}

func NewMockKonfig() *MockKonfig {
	return &MockKonfig{fail: pegomock.GlobalFailHandler}
}

func (mock *MockKonfig) ActiveCluster() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ActiveCluster", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockKonfig) ActiveNamespace() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ActiveNamespace", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockKonfig) ExcludedNS(_param0 string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ExcludedNS", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockKonfig) ExcludedNode(_param0 string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ExcludedNode", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockKonfig) LinterLevel() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("LinterLevel", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockKonfig) NodeCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockKonfig) NodeMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockKonfig) PodCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockKonfig) PodMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockKonfig) RestartsLimit() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RestartsLimit", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockKonfig) Sections() []string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockKonfig().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Sections", params, []reflect.Type{reflect.TypeOf((*[]string)(nil)).Elem()})
	var ret0 []string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]string)
		}
	}
	return ret0
}

func (mock *MockKonfig) VerifyWasCalledOnce() *VerifierKonfig {
	return &VerifierKonfig{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockKonfig) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierKonfig {
	return &VerifierKonfig{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockKonfig) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierKonfig {
	return &VerifierKonfig{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockKonfig) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierKonfig {
	return &VerifierKonfig{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierKonfig struct {
	mock                   *MockKonfig
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierKonfig) ActiveCluster() *Konfig_ActiveCluster_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ActiveCluster", params, verifier.timeout)
	return &Konfig_ActiveCluster_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_ActiveCluster_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_ActiveCluster_OngoingVerification) GetCapturedArguments() {
}

func (c *Konfig_ActiveCluster_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierKonfig) ActiveNamespace() *Konfig_ActiveNamespace_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ActiveNamespace", params, verifier.timeout)
	return &Konfig_ActiveNamespace_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_ActiveNamespace_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_ActiveNamespace_OngoingVerification) GetCapturedArguments() {
}

func (c *Konfig_ActiveNamespace_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierKonfig) ExcludedNS(_param0 string) *Konfig_ExcludedNS_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ExcludedNS", params, verifier.timeout)
	return &Konfig_ExcludedNS_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_ExcludedNS_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_ExcludedNS_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Konfig_ExcludedNS_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierKonfig) ExcludedNode(_param0 string) *Konfig_ExcludedNode_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ExcludedNode", params, verifier.timeout)
	return &Konfig_ExcludedNode_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_ExcludedNode_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_ExcludedNode_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Konfig_ExcludedNode_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierKonfig) LinterLevel() *Konfig_LinterLevel_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LinterLevel", params, verifier.timeout)
	return &Konfig_LinterLevel_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_LinterLevel_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_LinterLevel_OngoingVerification) GetCapturedArguments() {
}

func (c *Konfig_LinterLevel_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierKonfig) NodeCPULimit() *Konfig_NodeCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeCPULimit", params, verifier.timeout)
	return &Konfig_NodeCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_NodeCPULimit_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_NodeCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Konfig_NodeCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierKonfig) NodeMEMLimit() *Konfig_NodeMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeMEMLimit", params, verifier.timeout)
	return &Konfig_NodeMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_NodeMEMLimit_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_NodeMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Konfig_NodeMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierKonfig) PodCPULimit() *Konfig_PodCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodCPULimit", params, verifier.timeout)
	return &Konfig_PodCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_PodCPULimit_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_PodCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Konfig_PodCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierKonfig) PodMEMLimit() *Konfig_PodMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodMEMLimit", params, verifier.timeout)
	return &Konfig_PodMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_PodMEMLimit_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_PodMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Konfig_PodMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierKonfig) RestartsLimit() *Konfig_RestartsLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RestartsLimit", params, verifier.timeout)
	return &Konfig_RestartsLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_RestartsLimit_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_RestartsLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Konfig_RestartsLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierKonfig) Sections() *Konfig_Sections_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Sections", params, verifier.timeout)
	return &Konfig_Sections_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Konfig_Sections_OngoingVerification struct {
	mock              *MockKonfig
	methodInvocations []pegomock.MethodInvocation
}

func (c *Konfig_Sections_OngoingVerification) GetCapturedArguments() {
}

func (c *Konfig_Sections_OngoingVerification) GetAllCapturedArguments() {
}
