// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/derailed/popeye/internal/linter (interfaces: Lister)

package linter

import (
	"reflect"
	"time"

	pegomock "github.com/petergtz/pegomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/rbac/v1"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
)

type MockLister struct {
	fail func(message string, callerSkip ...int)
}

func NewMockLister() *MockLister {
	return &MockLister{fail: pegomock.GlobalFailHandler}
}

func (mock *MockLister) GetEndpoints(_param0 string) (*v1.Endpoints, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetEndpoints", params, []reflect.Type{reflect.TypeOf((**v1.Endpoints)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.Endpoints
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.Endpoints)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) GetPod(_param0 map[string]string) (*v1.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetPod", params, []reflect.Type{reflect.TypeOf((**v1.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllCRBs() (map[string]v10.ClusterRoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllCRBs", params, []reflect.Type{reflect.TypeOf((*map[string]v10.ClusterRoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.ClusterRoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.ClusterRoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllPods() (map[string]v1.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllPods", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllRBs() (map[string]v10.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllRBs", params, []reflect.Type{reflect.TypeOf((*map[string]v10.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListCMs() (map[string]v1.ConfigMap, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListCMs", params, []reflect.Type{reflect.TypeOf((*map[string]v1.ConfigMap)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.ConfigMap
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.ConfigMap)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListNS() (map[string]v1.Namespace, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNS", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Namespace)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Namespace
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Namespace)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListNodes() ([]v1.Node, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNodes", params, []reflect.Type{reflect.TypeOf((*[]v1.Node)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1.Node
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1.Node)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListNodesMetrics(_param0 []v1.Node, _param1 []v1beta1.NodeMetrics, _param2 NodesMetrics) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	pegomock.GetGenericMockFrom(mock).Invoke("ListNodesMetrics", params, []reflect.Type{})
}

func (mock *MockLister) ListPods() (map[string]v1.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPods", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListPodsMetrics(_param0 []v1beta1.PodMetrics, _param1 PodsMetrics) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0, _param1}
	pegomock.GetGenericMockFrom(mock).Invoke("ListPodsMetrics", params, []reflect.Type{})
}

func (mock *MockLister) ListRBs() (map[string]v10.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListRBs", params, []reflect.Type{reflect.TypeOf((*map[string]v10.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListSAs() (map[string]v1.ServiceAccount, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListSAs", params, []reflect.Type{reflect.TypeOf((*map[string]v1.ServiceAccount)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.ServiceAccount
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.ServiceAccount)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListSecs() (map[string]v1.Secret, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListSecs", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Secret)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Secret
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Secret)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListServices() (map[string]v1.Service, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListServices", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Service)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Service
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Service)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) PodsNamespaces(_param0 []string) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0}
	pegomock.GetGenericMockFrom(mock).Invoke("PodsNamespaces", params, []reflect.Type{})
}

func (mock *MockLister) VerifyWasCalledOnce() *VerifierLister {
	return &VerifierLister{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockLister) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierLister {
	return &VerifierLister{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockLister) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierLister {
	return &VerifierLister{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockLister) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierLister {
	return &VerifierLister{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierLister struct {
	mock                   *MockLister
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierLister) GetEndpoints(_param0 string) *Lister_GetEndpoints_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetEndpoints", params, verifier.timeout)
	return &Lister_GetEndpoints_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_GetEndpoints_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_GetEndpoints_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Lister_GetEndpoints_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLister) GetPod(_param0 map[string]string) *Lister_GetPod_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetPod", params, verifier.timeout)
	return &Lister_GetPod_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_GetPod_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_GetPod_OngoingVerification) GetCapturedArguments() map[string]string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Lister_GetPod_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]map[string]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(map[string]string)
		}
	}
	return
}

func (verifier *VerifierLister) ListAllCRBs() *Lister_ListAllCRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllCRBs", params, verifier.timeout)
	return &Lister_ListAllCRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllCRBs_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllCRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllCRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListAllPods() *Lister_ListAllPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllPods", params, verifier.timeout)
	return &Lister_ListAllPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllPods_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListAllRBs() *Lister_ListAllRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllRBs", params, verifier.timeout)
	return &Lister_ListAllRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllRBs_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListCMs() *Lister_ListCMs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListCMs", params, verifier.timeout)
	return &Lister_ListCMs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListCMs_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListCMs_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListCMs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListNS() *Lister_ListNS_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNS", params, verifier.timeout)
	return &Lister_ListNS_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListNS_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListNS_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListNS_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListNodes() *Lister_ListNodes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNodes", params, verifier.timeout)
	return &Lister_ListNodes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListNodes_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListNodes_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListNodes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListNodesMetrics(_param0 []v1.Node, _param1 []v1beta1.NodeMetrics, _param2 NodesMetrics) *Lister_ListNodesMetrics_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNodesMetrics", params, verifier.timeout)
	return &Lister_ListNodesMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListNodesMetrics_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListNodesMetrics_OngoingVerification) GetCapturedArguments() ([]v1.Node, []v1beta1.NodeMetrics, NodesMetrics) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *Lister_ListNodesMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 [][]v1.Node, _param1 [][]v1beta1.NodeMetrics, _param2 []NodesMetrics) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]v1.Node, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]v1.Node)
		}
		_param1 = make([][]v1beta1.NodeMetrics, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.([]v1beta1.NodeMetrics)
		}
		_param2 = make([]NodesMetrics, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(NodesMetrics)
		}
	}
	return
}

func (verifier *VerifierLister) ListPods() *Lister_ListPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPods", params, verifier.timeout)
	return &Lister_ListPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListPods_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListPodsMetrics(_param0 []v1beta1.PodMetrics, _param1 PodsMetrics) *Lister_ListPodsMetrics_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPodsMetrics", params, verifier.timeout)
	return &Lister_ListPodsMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListPodsMetrics_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListPodsMetrics_OngoingVerification) GetCapturedArguments() ([]v1beta1.PodMetrics, PodsMetrics) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Lister_ListPodsMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 [][]v1beta1.PodMetrics, _param1 []PodsMetrics) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]v1beta1.PodMetrics, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]v1beta1.PodMetrics)
		}
		_param1 = make([]PodsMetrics, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(PodsMetrics)
		}
	}
	return
}

func (verifier *VerifierLister) ListRBs() *Lister_ListRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListRBs", params, verifier.timeout)
	return &Lister_ListRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListRBs_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListSAs() *Lister_ListSAs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListSAs", params, verifier.timeout)
	return &Lister_ListSAs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListSAs_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListSAs_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListSAs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListSecs() *Lister_ListSecs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListSecs", params, verifier.timeout)
	return &Lister_ListSecs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListSecs_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListSecs_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListSecs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListServices() *Lister_ListServices_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListServices", params, verifier.timeout)
	return &Lister_ListServices_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListServices_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListServices_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListServices_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) PodsNamespaces(_param0 []string) *Lister_PodsNamespaces_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodsNamespaces", params, verifier.timeout)
	return &Lister_PodsNamespaces_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_PodsNamespaces_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_PodsNamespaces_OngoingVerification) GetCapturedArguments() []string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Lister_PodsNamespaces_OngoingVerification) GetAllCapturedArguments() (_param0 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]string)
		}
	}
	return
}
