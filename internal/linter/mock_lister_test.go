// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/derailed/popeye/internal/linter (interfaces: Lister)

package linter

import (
	k8s "github.com/derailed/popeye/internal/k8s"
	pegomock "github.com/petergtz/pegomock"
	v12 "k8s.io/api/apps/v1"
	v1 "k8s.io/api/autoscaling/v1"
	v10 "k8s.io/api/core/v1"
	v11 "k8s.io/api/rbac/v1"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
	"reflect"
	"time"
)

type MockLister struct {
	fail func(message string, callerSkip ...int)
}

func NewMockLister() *MockLister {
	return &MockLister{fail: pegomock.GlobalFailHandler}
}

func (mock *MockLister) GetEndpoints(_param0 string) (*v10.Endpoints, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetEndpoints", params, []reflect.Type{reflect.TypeOf((**v10.Endpoints)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.Endpoints
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.Endpoints)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) GetPod(_param0 map[string]string) (*v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetPod", params, []reflect.Type{reflect.TypeOf((**v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllClusterRoleBindings() (map[string]v11.ClusterRoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllClusterRoleBindings", params, []reflect.Type{reflect.TypeOf((*map[string]v11.ClusterRoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v11.ClusterRoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v11.ClusterRoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllDeployments() (map[string]v12.Deployment, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllDeployments", params, []reflect.Type{reflect.TypeOf((*map[string]v12.Deployment)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v12.Deployment
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v12.Deployment)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllHorizontalPodAutoscalers() (map[string]v1.HorizontalPodAutoscaler, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllHorizontalPodAutoscalers", params, []reflect.Type{reflect.TypeOf((*map[string]v1.HorizontalPodAutoscaler)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.HorizontalPodAutoscaler
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.HorizontalPodAutoscaler)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllPersistentVolumeClaims() (map[string]v10.PersistentVolumeClaim, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllPersistentVolumeClaims", params, []reflect.Type{reflect.TypeOf((*map[string]v10.PersistentVolumeClaim)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.PersistentVolumeClaim
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.PersistentVolumeClaim)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllPods() (map[string]v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllPods", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllRoleBindings() (map[string]v11.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllRoleBindings", params, []reflect.Type{reflect.TypeOf((*map[string]v11.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v11.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v11.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListAllStatefulSets() (map[string]v12.StatefulSet, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllStatefulSets", params, []reflect.Type{reflect.TypeOf((*map[string]v12.StatefulSet)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v12.StatefulSet
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v12.StatefulSet)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListConfigMaps() (map[string]v10.ConfigMap, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListConfigMaps", params, []reflect.Type{reflect.TypeOf((*map[string]v10.ConfigMap)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.ConfigMap
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.ConfigMap)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListDeployments() (map[string]v12.Deployment, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListDeployments", params, []reflect.Type{reflect.TypeOf((*map[string]v12.Deployment)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v12.Deployment
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v12.Deployment)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListHorizontalPodAutoscalers() (map[string]v1.HorizontalPodAutoscaler, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListHorizontalPodAutoscalers", params, []reflect.Type{reflect.TypeOf((*map[string]v1.HorizontalPodAutoscaler)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.HorizontalPodAutoscaler
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.HorizontalPodAutoscaler)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListNamespaces() (map[string]v10.Namespace, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNamespaces", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Namespace)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Namespace
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Namespace)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListNodes() ([]v10.Node, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNodes", params, []reflect.Type{reflect.TypeOf((*[]v10.Node)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v10.Node
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v10.Node)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListNodesMetrics(_param0 []v10.Node, _param1 []v1beta1.NodeMetrics, _param2 k8s.NodesMetrics) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	pegomock.GetGenericMockFrom(mock).Invoke("ListNodesMetrics", params, []reflect.Type{})
}

func (mock *MockLister) ListPersistentVolumeClaims() (map[string]v10.PersistentVolumeClaim, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPersistentVolumeClaims", params, []reflect.Type{reflect.TypeOf((*map[string]v10.PersistentVolumeClaim)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.PersistentVolumeClaim
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.PersistentVolumeClaim)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListPersistentVolumes() (map[string]v10.PersistentVolume, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPersistentVolumes", params, []reflect.Type{reflect.TypeOf((*map[string]v10.PersistentVolume)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.PersistentVolume
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.PersistentVolume)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListPods() (map[string]v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPods", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListPodsByLabels(_param0 string) (map[string]v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPodsByLabels", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListPodsMetrics(_param0 []v1beta1.PodMetrics, _param1 k8s.PodsMetrics) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0, _param1}
	pegomock.GetGenericMockFrom(mock).Invoke("ListPodsMetrics", params, []reflect.Type{})
}

func (mock *MockLister) ListRoleBindings() (map[string]v11.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListRoleBindings", params, []reflect.Type{reflect.TypeOf((*map[string]v11.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v11.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v11.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListSecrets() (map[string]v10.Secret, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListSecrets", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Secret)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Secret
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Secret)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListServiceAccounts() (map[string]v10.ServiceAccount, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListServiceAccounts", params, []reflect.Type{reflect.TypeOf((*map[string]v10.ServiceAccount)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.ServiceAccount
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.ServiceAccount)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListServices() (map[string]v10.Service, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListServices", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Service)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Service
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Service)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) ListStatefulSets() (map[string]v12.StatefulSet, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListStatefulSets", params, []reflect.Type{reflect.TypeOf((*map[string]v12.StatefulSet)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v12.StatefulSet
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v12.StatefulSet)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLister) PodsNamespaces(_param0 []string) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLister().")
	}
	params := []pegomock.Param{_param0}
	pegomock.GetGenericMockFrom(mock).Invoke("PodsNamespaces", params, []reflect.Type{})
}

func (mock *MockLister) VerifyWasCalledOnce() *VerifierLister {
	return &VerifierLister{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockLister) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierLister {
	return &VerifierLister{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockLister) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierLister {
	return &VerifierLister{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockLister) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierLister {
	return &VerifierLister{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierLister struct {
	mock                   *MockLister
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierLister) GetEndpoints(_param0 string) *Lister_GetEndpoints_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetEndpoints", params, verifier.timeout)
	return &Lister_GetEndpoints_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_GetEndpoints_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_GetEndpoints_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Lister_GetEndpoints_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLister) GetPod(_param0 map[string]string) *Lister_GetPod_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetPod", params, verifier.timeout)
	return &Lister_GetPod_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_GetPod_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_GetPod_OngoingVerification) GetCapturedArguments() map[string]string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Lister_GetPod_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]map[string]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(map[string]string)
		}
	}
	return
}

func (verifier *VerifierLister) ListAllClusterRoleBindings() *Lister_ListAllClusterRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllClusterRoleBindings", params, verifier.timeout)
	return &Lister_ListAllClusterRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllClusterRoleBindings_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllClusterRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllClusterRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListAllDeployments() *Lister_ListAllDeployments_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllDeployments", params, verifier.timeout)
	return &Lister_ListAllDeployments_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllDeployments_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllDeployments_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllDeployments_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListAllHorizontalPodAutoscalers() *Lister_ListAllHorizontalPodAutoscalers_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllHorizontalPodAutoscalers", params, verifier.timeout)
	return &Lister_ListAllHorizontalPodAutoscalers_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllHorizontalPodAutoscalers_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllHorizontalPodAutoscalers_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllHorizontalPodAutoscalers_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListAllPersistentVolumeClaims() *Lister_ListAllPersistentVolumeClaims_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllPersistentVolumeClaims", params, verifier.timeout)
	return &Lister_ListAllPersistentVolumeClaims_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllPersistentVolumeClaims_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllPersistentVolumeClaims_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllPersistentVolumeClaims_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListAllPods() *Lister_ListAllPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllPods", params, verifier.timeout)
	return &Lister_ListAllPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllPods_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListAllRoleBindings() *Lister_ListAllRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllRoleBindings", params, verifier.timeout)
	return &Lister_ListAllRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllRoleBindings_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListAllStatefulSets() *Lister_ListAllStatefulSets_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllStatefulSets", params, verifier.timeout)
	return &Lister_ListAllStatefulSets_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListAllStatefulSets_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListAllStatefulSets_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListAllStatefulSets_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListConfigMaps() *Lister_ListConfigMaps_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListConfigMaps", params, verifier.timeout)
	return &Lister_ListConfigMaps_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListConfigMaps_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListConfigMaps_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListConfigMaps_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListDeployments() *Lister_ListDeployments_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListDeployments", params, verifier.timeout)
	return &Lister_ListDeployments_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListDeployments_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListDeployments_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListDeployments_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListHorizontalPodAutoscalers() *Lister_ListHorizontalPodAutoscalers_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListHorizontalPodAutoscalers", params, verifier.timeout)
	return &Lister_ListHorizontalPodAutoscalers_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListHorizontalPodAutoscalers_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListHorizontalPodAutoscalers_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListHorizontalPodAutoscalers_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListNamespaces() *Lister_ListNamespaces_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNamespaces", params, verifier.timeout)
	return &Lister_ListNamespaces_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListNamespaces_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListNamespaces_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListNamespaces_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListNodes() *Lister_ListNodes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNodes", params, verifier.timeout)
	return &Lister_ListNodes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListNodes_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListNodes_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListNodes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListNodesMetrics(_param0 []v10.Node, _param1 []v1beta1.NodeMetrics, _param2 k8s.NodesMetrics) *Lister_ListNodesMetrics_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNodesMetrics", params, verifier.timeout)
	return &Lister_ListNodesMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListNodesMetrics_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListNodesMetrics_OngoingVerification) GetCapturedArguments() ([]v10.Node, []v1beta1.NodeMetrics, k8s.NodesMetrics) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *Lister_ListNodesMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 [][]v10.Node, _param1 [][]v1beta1.NodeMetrics, _param2 []k8s.NodesMetrics) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]v10.Node, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]v10.Node)
		}
		_param1 = make([][]v1beta1.NodeMetrics, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.([]v1beta1.NodeMetrics)
		}
		_param2 = make([]k8s.NodesMetrics, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(k8s.NodesMetrics)
		}
	}
	return
}

func (verifier *VerifierLister) ListPersistentVolumeClaims() *Lister_ListPersistentVolumeClaims_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPersistentVolumeClaims", params, verifier.timeout)
	return &Lister_ListPersistentVolumeClaims_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListPersistentVolumeClaims_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListPersistentVolumeClaims_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListPersistentVolumeClaims_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListPersistentVolumes() *Lister_ListPersistentVolumes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPersistentVolumes", params, verifier.timeout)
	return &Lister_ListPersistentVolumes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListPersistentVolumes_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListPersistentVolumes_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListPersistentVolumes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListPods() *Lister_ListPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPods", params, verifier.timeout)
	return &Lister_ListPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListPods_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListPodsByLabels(_param0 string) *Lister_ListPodsByLabels_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPodsByLabels", params, verifier.timeout)
	return &Lister_ListPodsByLabels_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListPodsByLabels_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListPodsByLabels_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Lister_ListPodsByLabels_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLister) ListPodsMetrics(_param0 []v1beta1.PodMetrics, _param1 k8s.PodsMetrics) *Lister_ListPodsMetrics_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPodsMetrics", params, verifier.timeout)
	return &Lister_ListPodsMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListPodsMetrics_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListPodsMetrics_OngoingVerification) GetCapturedArguments() ([]v1beta1.PodMetrics, k8s.PodsMetrics) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Lister_ListPodsMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 [][]v1beta1.PodMetrics, _param1 []k8s.PodsMetrics) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]v1beta1.PodMetrics, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]v1beta1.PodMetrics)
		}
		_param1 = make([]k8s.PodsMetrics, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(k8s.PodsMetrics)
		}
	}
	return
}

func (verifier *VerifierLister) ListRoleBindings() *Lister_ListRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListRoleBindings", params, verifier.timeout)
	return &Lister_ListRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListRoleBindings_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListSecrets() *Lister_ListSecrets_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListSecrets", params, verifier.timeout)
	return &Lister_ListSecrets_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListSecrets_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListSecrets_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListSecrets_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListServiceAccounts() *Lister_ListServiceAccounts_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListServiceAccounts", params, verifier.timeout)
	return &Lister_ListServiceAccounts_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListServiceAccounts_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListServiceAccounts_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListServiceAccounts_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListServices() *Lister_ListServices_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListServices", params, verifier.timeout)
	return &Lister_ListServices_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListServices_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListServices_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListServices_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) ListStatefulSets() *Lister_ListStatefulSets_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListStatefulSets", params, verifier.timeout)
	return &Lister_ListStatefulSets_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_ListStatefulSets_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_ListStatefulSets_OngoingVerification) GetCapturedArguments() {
}

func (c *Lister_ListStatefulSets_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLister) PodsNamespaces(_param0 []string) *Lister_PodsNamespaces_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodsNamespaces", params, verifier.timeout)
	return &Lister_PodsNamespaces_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Lister_PodsNamespaces_OngoingVerification struct {
	mock              *MockLister
	methodInvocations []pegomock.MethodInvocation
}

func (c *Lister_PodsNamespaces_OngoingVerification) GetCapturedArguments() []string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Lister_PodsNamespaces_OngoingVerification) GetAllCapturedArguments() (_param0 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]string)
		}
	}
	return
}
