// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/derailed/popeye/internal/linter (interfaces: Loader)

package linter

import (
	k8s "github.com/derailed/popeye/internal/k8s"
	config "github.com/derailed/popeye/pkg/config"
	pegomock "github.com/petergtz/pegomock"
	v11 "k8s.io/api/apps/v1"
	v12 "k8s.io/api/autoscaling/v1"
	v10 "k8s.io/api/core/v1"
	v1 "k8s.io/api/rbac/v1"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
	"reflect"
	"time"
)

type MockLoader struct {
	fail func(message string, callerSkip ...int)
}

func NewMockLoader() *MockLoader {
	return &MockLoader{fail: pegomock.GlobalFailHandler}
}

func (mock *MockLoader) ActiveCluster() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ActiveCluster", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockLoader) ActiveNamespace() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ActiveNamespace", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockLoader) CPUResourceLimits() config.Allocations {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CPUResourceLimits", params, []reflect.Type{reflect.TypeOf((*config.Allocations)(nil)).Elem()})
	var ret0 config.Allocations
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(config.Allocations)
		}
	}
	return ret0
}

func (mock *MockLoader) ClusterHasMetrics() (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ClusterHasMetrics", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ExcludedNS(_param0 string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ExcludedNS", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockLoader) ExcludedNode(_param0 string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ExcludedNode", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockLoader) FetchClusterRoleBindings() (*v1.ClusterRoleBindingList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchClusterRoleBindings", params, []reflect.Type{reflect.TypeOf((**v1.ClusterRoleBindingList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.ClusterRoleBindingList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.ClusterRoleBindingList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchConfigMaps() (*v10.ConfigMapList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchConfigMaps", params, []reflect.Type{reflect.TypeOf((**v10.ConfigMapList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ConfigMapList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ConfigMapList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchDeployments() (*v11.DeploymentList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchDeployments", params, []reflect.Type{reflect.TypeOf((**v11.DeploymentList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v11.DeploymentList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v11.DeploymentList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchEndpoints() (*v10.EndpointsList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchEndpoints", params, []reflect.Type{reflect.TypeOf((**v10.EndpointsList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.EndpointsList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.EndpointsList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchHorizontalPodAutoscalers() (*v12.HorizontalPodAutoscalerList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchHorizontalPodAutoscalers", params, []reflect.Type{reflect.TypeOf((**v12.HorizontalPodAutoscalerList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v12.HorizontalPodAutoscalerList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v12.HorizontalPodAutoscalerList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchNamespaces() (*v10.NamespaceList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNamespaces", params, []reflect.Type{reflect.TypeOf((**v10.NamespaceList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.NamespaceList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.NamespaceList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchNodes() (*v10.NodeList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNodes", params, []reflect.Type{reflect.TypeOf((**v10.NodeList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.NodeList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.NodeList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchNodesMetrics() ([]v1beta1.NodeMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNodesMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.NodeMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.NodeMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.NodeMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchPersistentVolumeClaims() (*v10.PersistentVolumeClaimList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPersistentVolumeClaims", params, []reflect.Type{reflect.TypeOf((**v10.PersistentVolumeClaimList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.PersistentVolumeClaimList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.PersistentVolumeClaimList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchPersistentVolumes() (*v10.PersistentVolumeList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPersistentVolumes", params, []reflect.Type{reflect.TypeOf((**v10.PersistentVolumeList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.PersistentVolumeList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.PersistentVolumeList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchPods() (*v10.PodList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPods", params, []reflect.Type{reflect.TypeOf((**v10.PodList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.PodList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.PodList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchPodsByLabels(_param0 string) (*v10.PodList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPodsByLabels", params, []reflect.Type{reflect.TypeOf((**v10.PodList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.PodList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.PodList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchPodsMetrics(_param0 string) ([]v1beta1.PodMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPodsMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.PodMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.PodMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.PodMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchRoleBindings() (*v1.RoleBindingList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchRoleBindings", params, []reflect.Type{reflect.TypeOf((**v1.RoleBindingList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.RoleBindingList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.RoleBindingList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchSecrets() (*v10.SecretList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchSecrets", params, []reflect.Type{reflect.TypeOf((**v10.SecretList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.SecretList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.SecretList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchServiceAccounts() (*v10.ServiceAccountList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchServiceAccounts", params, []reflect.Type{reflect.TypeOf((**v10.ServiceAccountList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ServiceAccountList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ServiceAccountList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchServices() (*v10.ServiceList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchServices", params, []reflect.Type{reflect.TypeOf((**v10.ServiceList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ServiceList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ServiceList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchStatefulSets() (*v11.StatefulSetList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchStatefulSets", params, []reflect.Type{reflect.TypeOf((**v11.StatefulSetList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v11.StatefulSetList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v11.StatefulSetList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) GetEndpoints(_param0 string) (*v10.Endpoints, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetEndpoints", params, []reflect.Type{reflect.TypeOf((**v10.Endpoints)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.Endpoints
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.Endpoints)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) GetPod(_param0 map[string]string) (*v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetPod", params, []reflect.Type{reflect.TypeOf((**v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) LinterLevel() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("LinterLevel", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockLoader) ListAllClusterRoleBindings() (map[string]v1.ClusterRoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllClusterRoleBindings", params, []reflect.Type{reflect.TypeOf((*map[string]v1.ClusterRoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.ClusterRoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.ClusterRoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListAllDeployments() (map[string]v11.Deployment, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllDeployments", params, []reflect.Type{reflect.TypeOf((*map[string]v11.Deployment)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v11.Deployment
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v11.Deployment)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListAllHorizontalPodAutoscalers() (map[string]v12.HorizontalPodAutoscaler, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllHorizontalPodAutoscalers", params, []reflect.Type{reflect.TypeOf((*map[string]v12.HorizontalPodAutoscaler)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v12.HorizontalPodAutoscaler
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v12.HorizontalPodAutoscaler)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListAllPersistentVolumeClaims() (map[string]v10.PersistentVolumeClaim, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllPersistentVolumeClaims", params, []reflect.Type{reflect.TypeOf((*map[string]v10.PersistentVolumeClaim)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.PersistentVolumeClaim
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.PersistentVolumeClaim)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListAllPods() (map[string]v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllPods", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListAllRoleBindings() (map[string]v1.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllRoleBindings", params, []reflect.Type{reflect.TypeOf((*map[string]v1.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListAllStatefulSets() (map[string]v11.StatefulSet, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllStatefulSets", params, []reflect.Type{reflect.TypeOf((*map[string]v11.StatefulSet)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v11.StatefulSet
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v11.StatefulSet)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListConfigMaps() (map[string]v10.ConfigMap, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListConfigMaps", params, []reflect.Type{reflect.TypeOf((*map[string]v10.ConfigMap)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.ConfigMap
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.ConfigMap)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListDeployments() (map[string]v11.Deployment, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListDeployments", params, []reflect.Type{reflect.TypeOf((*map[string]v11.Deployment)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v11.Deployment
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v11.Deployment)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListHorizontalPodAutoscalers() (map[string]v12.HorizontalPodAutoscaler, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListHorizontalPodAutoscalers", params, []reflect.Type{reflect.TypeOf((*map[string]v12.HorizontalPodAutoscaler)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v12.HorizontalPodAutoscaler
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v12.HorizontalPodAutoscaler)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListNamespaces() (map[string]v10.Namespace, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNamespaces", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Namespace)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Namespace
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Namespace)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListNodes() ([]v10.Node, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNodes", params, []reflect.Type{reflect.TypeOf((*[]v10.Node)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v10.Node
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v10.Node)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListNodesMetrics(_param0 []v10.Node, _param1 []v1beta1.NodeMetrics, _param2 k8s.NodesMetrics) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	pegomock.GetGenericMockFrom(mock).Invoke("ListNodesMetrics", params, []reflect.Type{})
}

func (mock *MockLoader) ListPersistentVolumeClaims() (map[string]v10.PersistentVolumeClaim, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPersistentVolumeClaims", params, []reflect.Type{reflect.TypeOf((*map[string]v10.PersistentVolumeClaim)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.PersistentVolumeClaim
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.PersistentVolumeClaim)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListPersistentVolumes() (map[string]v10.PersistentVolume, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPersistentVolumes", params, []reflect.Type{reflect.TypeOf((*map[string]v10.PersistentVolume)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.PersistentVolume
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.PersistentVolume)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListPods() (map[string]v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPods", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListPodsByLabels(_param0 string) (map[string]v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPodsByLabels", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListPodsMetrics(_param0 []v1beta1.PodMetrics, _param1 k8s.PodsMetrics) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0, _param1}
	pegomock.GetGenericMockFrom(mock).Invoke("ListPodsMetrics", params, []reflect.Type{})
}

func (mock *MockLoader) ListRoleBindings() (map[string]v1.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListRoleBindings", params, []reflect.Type{reflect.TypeOf((*map[string]v1.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListSecrets() (map[string]v10.Secret, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListSecrets", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Secret)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Secret
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Secret)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListServiceAccounts() (map[string]v10.ServiceAccount, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListServiceAccounts", params, []reflect.Type{reflect.TypeOf((*map[string]v10.ServiceAccount)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.ServiceAccount
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.ServiceAccount)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListServices() (map[string]v10.Service, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListServices", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Service)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Service
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Service)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListStatefulSets() (map[string]v11.StatefulSet, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListStatefulSets", params, []reflect.Type{reflect.TypeOf((*map[string]v11.StatefulSet)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v11.StatefulSet
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v11.StatefulSet)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) MEMResourceLimits() config.Allocations {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("MEMResourceLimits", params, []reflect.Type{reflect.TypeOf((*config.Allocations)(nil)).Elem()})
	var ret0 config.Allocations
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(config.Allocations)
		}
	}
	return ret0
}

func (mock *MockLoader) NodeCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockLoader) NodeMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockLoader) PodCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockLoader) PodMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockLoader) PodsNamespaces(_param0 []string) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	pegomock.GetGenericMockFrom(mock).Invoke("PodsNamespaces", params, []reflect.Type{})
}

func (mock *MockLoader) RestartsLimit() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RestartsLimit", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockLoader) Sections() []string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Sections", params, []reflect.Type{reflect.TypeOf((*[]string)(nil)).Elem()})
	var ret0 []string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]string)
		}
	}
	return ret0
}

func (mock *MockLoader) VerifyWasCalledOnce() *VerifierLoader {
	return &VerifierLoader{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockLoader) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierLoader {
	return &VerifierLoader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockLoader) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierLoader {
	return &VerifierLoader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockLoader) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierLoader {
	return &VerifierLoader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierLoader struct {
	mock                   *MockLoader
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierLoader) ActiveCluster() *Loader_ActiveCluster_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ActiveCluster", params, verifier.timeout)
	return &Loader_ActiveCluster_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ActiveCluster_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ActiveCluster_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ActiveCluster_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ActiveNamespace() *Loader_ActiveNamespace_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ActiveNamespace", params, verifier.timeout)
	return &Loader_ActiveNamespace_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ActiveNamespace_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ActiveNamespace_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ActiveNamespace_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) CPUResourceLimits() *Loader_CPUResourceLimits_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CPUResourceLimits", params, verifier.timeout)
	return &Loader_CPUResourceLimits_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_CPUResourceLimits_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_CPUResourceLimits_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_CPUResourceLimits_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ClusterHasMetrics() *Loader_ClusterHasMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClusterHasMetrics", params, verifier.timeout)
	return &Loader_ClusterHasMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ClusterHasMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ClusterHasMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ClusterHasMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ExcludedNS(_param0 string) *Loader_ExcludedNS_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ExcludedNS", params, verifier.timeout)
	return &Loader_ExcludedNS_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ExcludedNS_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ExcludedNS_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_ExcludedNS_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) ExcludedNode(_param0 string) *Loader_ExcludedNode_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ExcludedNode", params, verifier.timeout)
	return &Loader_ExcludedNode_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ExcludedNode_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ExcludedNode_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_ExcludedNode_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) FetchClusterRoleBindings() *Loader_FetchClusterRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchClusterRoleBindings", params, verifier.timeout)
	return &Loader_FetchClusterRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchClusterRoleBindings_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchClusterRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchClusterRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchConfigMaps() *Loader_FetchConfigMaps_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchConfigMaps", params, verifier.timeout)
	return &Loader_FetchConfigMaps_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchConfigMaps_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchConfigMaps_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchConfigMaps_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchDeployments() *Loader_FetchDeployments_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchDeployments", params, verifier.timeout)
	return &Loader_FetchDeployments_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchDeployments_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchDeployments_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchDeployments_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchEndpoints() *Loader_FetchEndpoints_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchEndpoints", params, verifier.timeout)
	return &Loader_FetchEndpoints_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchEndpoints_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchEndpoints_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchEndpoints_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchHorizontalPodAutoscalers() *Loader_FetchHorizontalPodAutoscalers_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchHorizontalPodAutoscalers", params, verifier.timeout)
	return &Loader_FetchHorizontalPodAutoscalers_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchHorizontalPodAutoscalers_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchHorizontalPodAutoscalers_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchHorizontalPodAutoscalers_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchNamespaces() *Loader_FetchNamespaces_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNamespaces", params, verifier.timeout)
	return &Loader_FetchNamespaces_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchNamespaces_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchNamespaces_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchNamespaces_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchNodes() *Loader_FetchNodes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNodes", params, verifier.timeout)
	return &Loader_FetchNodes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchNodes_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchNodes_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchNodes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchNodesMetrics() *Loader_FetchNodesMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNodesMetrics", params, verifier.timeout)
	return &Loader_FetchNodesMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchNodesMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchNodesMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchNodesMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchPersistentVolumeClaims() *Loader_FetchPersistentVolumeClaims_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPersistentVolumeClaims", params, verifier.timeout)
	return &Loader_FetchPersistentVolumeClaims_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchPersistentVolumeClaims_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchPersistentVolumeClaims_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchPersistentVolumeClaims_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchPersistentVolumes() *Loader_FetchPersistentVolumes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPersistentVolumes", params, verifier.timeout)
	return &Loader_FetchPersistentVolumes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchPersistentVolumes_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchPersistentVolumes_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchPersistentVolumes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchPods() *Loader_FetchPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPods", params, verifier.timeout)
	return &Loader_FetchPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchPods_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchPodsByLabels(_param0 string) *Loader_FetchPodsByLabels_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPodsByLabels", params, verifier.timeout)
	return &Loader_FetchPodsByLabels_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchPodsByLabels_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchPodsByLabels_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_FetchPodsByLabels_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) FetchPodsMetrics(_param0 string) *Loader_FetchPodsMetrics_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPodsMetrics", params, verifier.timeout)
	return &Loader_FetchPodsMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchPodsMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchPodsMetrics_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_FetchPodsMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) FetchRoleBindings() *Loader_FetchRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchRoleBindings", params, verifier.timeout)
	return &Loader_FetchRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchRoleBindings_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchSecrets() *Loader_FetchSecrets_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchSecrets", params, verifier.timeout)
	return &Loader_FetchSecrets_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchSecrets_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchSecrets_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchSecrets_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchServiceAccounts() *Loader_FetchServiceAccounts_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchServiceAccounts", params, verifier.timeout)
	return &Loader_FetchServiceAccounts_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchServiceAccounts_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchServiceAccounts_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchServiceAccounts_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchServices() *Loader_FetchServices_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchServices", params, verifier.timeout)
	return &Loader_FetchServices_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchServices_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchServices_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchServices_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchStatefulSets() *Loader_FetchStatefulSets_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchStatefulSets", params, verifier.timeout)
	return &Loader_FetchStatefulSets_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchStatefulSets_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchStatefulSets_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchStatefulSets_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) GetEndpoints(_param0 string) *Loader_GetEndpoints_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetEndpoints", params, verifier.timeout)
	return &Loader_GetEndpoints_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_GetEndpoints_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_GetEndpoints_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_GetEndpoints_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) GetPod(_param0 map[string]string) *Loader_GetPod_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetPod", params, verifier.timeout)
	return &Loader_GetPod_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_GetPod_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_GetPod_OngoingVerification) GetCapturedArguments() map[string]string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_GetPod_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]map[string]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(map[string]string)
		}
	}
	return
}

func (verifier *VerifierLoader) LinterLevel() *Loader_LinterLevel_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LinterLevel", params, verifier.timeout)
	return &Loader_LinterLevel_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_LinterLevel_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_LinterLevel_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_LinterLevel_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllClusterRoleBindings() *Loader_ListAllClusterRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllClusterRoleBindings", params, verifier.timeout)
	return &Loader_ListAllClusterRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllClusterRoleBindings_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllClusterRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllClusterRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllDeployments() *Loader_ListAllDeployments_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllDeployments", params, verifier.timeout)
	return &Loader_ListAllDeployments_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllDeployments_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllDeployments_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllDeployments_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllHorizontalPodAutoscalers() *Loader_ListAllHorizontalPodAutoscalers_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllHorizontalPodAutoscalers", params, verifier.timeout)
	return &Loader_ListAllHorizontalPodAutoscalers_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllHorizontalPodAutoscalers_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllHorizontalPodAutoscalers_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllHorizontalPodAutoscalers_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllPersistentVolumeClaims() *Loader_ListAllPersistentVolumeClaims_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllPersistentVolumeClaims", params, verifier.timeout)
	return &Loader_ListAllPersistentVolumeClaims_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllPersistentVolumeClaims_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllPersistentVolumeClaims_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllPersistentVolumeClaims_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllPods() *Loader_ListAllPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllPods", params, verifier.timeout)
	return &Loader_ListAllPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllPods_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllRoleBindings() *Loader_ListAllRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllRoleBindings", params, verifier.timeout)
	return &Loader_ListAllRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllRoleBindings_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllStatefulSets() *Loader_ListAllStatefulSets_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllStatefulSets", params, verifier.timeout)
	return &Loader_ListAllStatefulSets_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllStatefulSets_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllStatefulSets_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllStatefulSets_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListConfigMaps() *Loader_ListConfigMaps_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListConfigMaps", params, verifier.timeout)
	return &Loader_ListConfigMaps_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListConfigMaps_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListConfigMaps_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListConfigMaps_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListDeployments() *Loader_ListDeployments_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListDeployments", params, verifier.timeout)
	return &Loader_ListDeployments_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListDeployments_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListDeployments_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListDeployments_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListHorizontalPodAutoscalers() *Loader_ListHorizontalPodAutoscalers_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListHorizontalPodAutoscalers", params, verifier.timeout)
	return &Loader_ListHorizontalPodAutoscalers_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListHorizontalPodAutoscalers_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListHorizontalPodAutoscalers_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListHorizontalPodAutoscalers_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListNamespaces() *Loader_ListNamespaces_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNamespaces", params, verifier.timeout)
	return &Loader_ListNamespaces_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListNamespaces_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListNamespaces_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListNamespaces_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListNodes() *Loader_ListNodes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNodes", params, verifier.timeout)
	return &Loader_ListNodes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListNodes_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListNodes_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListNodes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListNodesMetrics(_param0 []v10.Node, _param1 []v1beta1.NodeMetrics, _param2 k8s.NodesMetrics) *Loader_ListNodesMetrics_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNodesMetrics", params, verifier.timeout)
	return &Loader_ListNodesMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListNodesMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListNodesMetrics_OngoingVerification) GetCapturedArguments() ([]v10.Node, []v1beta1.NodeMetrics, k8s.NodesMetrics) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *Loader_ListNodesMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 [][]v10.Node, _param1 [][]v1beta1.NodeMetrics, _param2 []k8s.NodesMetrics) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]v10.Node, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]v10.Node)
		}
		_param1 = make([][]v1beta1.NodeMetrics, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.([]v1beta1.NodeMetrics)
		}
		_param2 = make([]k8s.NodesMetrics, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(k8s.NodesMetrics)
		}
	}
	return
}

func (verifier *VerifierLoader) ListPersistentVolumeClaims() *Loader_ListPersistentVolumeClaims_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPersistentVolumeClaims", params, verifier.timeout)
	return &Loader_ListPersistentVolumeClaims_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListPersistentVolumeClaims_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListPersistentVolumeClaims_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListPersistentVolumeClaims_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListPersistentVolumes() *Loader_ListPersistentVolumes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPersistentVolumes", params, verifier.timeout)
	return &Loader_ListPersistentVolumes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListPersistentVolumes_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListPersistentVolumes_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListPersistentVolumes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListPods() *Loader_ListPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPods", params, verifier.timeout)
	return &Loader_ListPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListPods_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListPodsByLabels(_param0 string) *Loader_ListPodsByLabels_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPodsByLabels", params, verifier.timeout)
	return &Loader_ListPodsByLabels_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListPodsByLabels_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListPodsByLabels_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_ListPodsByLabels_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) ListPodsMetrics(_param0 []v1beta1.PodMetrics, _param1 k8s.PodsMetrics) *Loader_ListPodsMetrics_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPodsMetrics", params, verifier.timeout)
	return &Loader_ListPodsMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListPodsMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListPodsMetrics_OngoingVerification) GetCapturedArguments() ([]v1beta1.PodMetrics, k8s.PodsMetrics) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Loader_ListPodsMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 [][]v1beta1.PodMetrics, _param1 []k8s.PodsMetrics) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]v1beta1.PodMetrics, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]v1beta1.PodMetrics)
		}
		_param1 = make([]k8s.PodsMetrics, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(k8s.PodsMetrics)
		}
	}
	return
}

func (verifier *VerifierLoader) ListRoleBindings() *Loader_ListRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListRoleBindings", params, verifier.timeout)
	return &Loader_ListRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListRoleBindings_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListSecrets() *Loader_ListSecrets_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListSecrets", params, verifier.timeout)
	return &Loader_ListSecrets_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListSecrets_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListSecrets_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListSecrets_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListServiceAccounts() *Loader_ListServiceAccounts_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListServiceAccounts", params, verifier.timeout)
	return &Loader_ListServiceAccounts_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListServiceAccounts_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListServiceAccounts_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListServiceAccounts_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListServices() *Loader_ListServices_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListServices", params, verifier.timeout)
	return &Loader_ListServices_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListServices_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListServices_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListServices_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListStatefulSets() *Loader_ListStatefulSets_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListStatefulSets", params, verifier.timeout)
	return &Loader_ListStatefulSets_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListStatefulSets_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListStatefulSets_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListStatefulSets_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) MEMResourceLimits() *Loader_MEMResourceLimits_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "MEMResourceLimits", params, verifier.timeout)
	return &Loader_MEMResourceLimits_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_MEMResourceLimits_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_MEMResourceLimits_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_MEMResourceLimits_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) NodeCPULimit() *Loader_NodeCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeCPULimit", params, verifier.timeout)
	return &Loader_NodeCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_NodeCPULimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_NodeCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_NodeCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) NodeMEMLimit() *Loader_NodeMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeMEMLimit", params, verifier.timeout)
	return &Loader_NodeMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_NodeMEMLimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_NodeMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_NodeMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) PodCPULimit() *Loader_PodCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodCPULimit", params, verifier.timeout)
	return &Loader_PodCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_PodCPULimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_PodCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_PodCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) PodMEMLimit() *Loader_PodMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodMEMLimit", params, verifier.timeout)
	return &Loader_PodMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_PodMEMLimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_PodMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_PodMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) PodsNamespaces(_param0 []string) *Loader_PodsNamespaces_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodsNamespaces", params, verifier.timeout)
	return &Loader_PodsNamespaces_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_PodsNamespaces_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_PodsNamespaces_OngoingVerification) GetCapturedArguments() []string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_PodsNamespaces_OngoingVerification) GetAllCapturedArguments() (_param0 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]string)
		}
	}
	return
}

func (verifier *VerifierLoader) RestartsLimit() *Loader_RestartsLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RestartsLimit", params, verifier.timeout)
	return &Loader_RestartsLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_RestartsLimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_RestartsLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_RestartsLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) Sections() *Loader_Sections_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Sections", params, verifier.timeout)
	return &Loader_Sections_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_Sections_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_Sections_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_Sections_OngoingVerification) GetAllCapturedArguments() {
}
