// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/derailed/popeye/internal/linter (interfaces: Loader)

package linter

import (
	"reflect"
	"time"

	pegomock "github.com/petergtz/pegomock"
	v10 "k8s.io/api/core/v1"
	v1 "k8s.io/api/rbac/v1"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
)

type MockLoader struct {
	fail func(message string, callerSkip ...int)
}

func NewMockLoader() *MockLoader {
	return &MockLoader{fail: pegomock.GlobalFailHandler}
}

func (mock *MockLoader) ActiveCluster() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ActiveCluster", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockLoader) ActiveNamespace() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ActiveNamespace", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockLoader) ClusterHasMetrics() (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ClusterHasMetrics", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ExcludedNS(_param0 string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ExcludedNS", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockLoader) ExcludedNode(_param0 string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ExcludedNode", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockLoader) FetchCMs() (*v10.ConfigMapList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchCMs", params, []reflect.Type{reflect.TypeOf((**v10.ConfigMapList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ConfigMapList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ConfigMapList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchCRBs() (*v1.ClusterRoleBindingList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchCRBs", params, []reflect.Type{reflect.TypeOf((**v1.ClusterRoleBindingList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.ClusterRoleBindingList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.ClusterRoleBindingList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchEPs() (*v10.EndpointsList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchEPs", params, []reflect.Type{reflect.TypeOf((**v10.EndpointsList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.EndpointsList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.EndpointsList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchNOs() (*v10.NodeList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNOs", params, []reflect.Type{reflect.TypeOf((**v10.NodeList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.NodeList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.NodeList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchNSs() (*v10.NamespaceList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNSs", params, []reflect.Type{reflect.TypeOf((**v10.NamespaceList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.NamespaceList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.NamespaceList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchNodesMetrics() ([]v1beta1.NodeMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNodesMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.NodeMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.NodeMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.NodeMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchPOs() (*v10.PodList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPOs", params, []reflect.Type{reflect.TypeOf((**v10.PodList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.PodList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.PodList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchPodsMetrics(_param0 string) ([]v1beta1.PodMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPodsMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.PodMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.PodMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.PodMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchRBs() (*v1.RoleBindingList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchRBs", params, []reflect.Type{reflect.TypeOf((**v1.RoleBindingList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.RoleBindingList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.RoleBindingList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchSAs() (*v10.ServiceAccountList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchSAs", params, []reflect.Type{reflect.TypeOf((**v10.ServiceAccountList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ServiceAccountList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ServiceAccountList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchSECs() (*v10.SecretList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchSECs", params, []reflect.Type{reflect.TypeOf((**v10.SecretList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.SecretList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.SecretList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) FetchSVCs() (*v10.ServiceList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchSVCs", params, []reflect.Type{reflect.TypeOf((**v10.ServiceList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ServiceList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ServiceList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) GetEndpoints(_param0 string) (*v10.Endpoints, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetEndpoints", params, []reflect.Type{reflect.TypeOf((**v10.Endpoints)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.Endpoints
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.Endpoints)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) GetPod(_param0 map[string]string) (*v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetPod", params, []reflect.Type{reflect.TypeOf((**v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) LinterLevel() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("LinterLevel", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockLoader) ListAllCRBs() (map[string]v1.ClusterRoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllCRBs", params, []reflect.Type{reflect.TypeOf((*map[string]v1.ClusterRoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.ClusterRoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.ClusterRoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListAllPods() (map[string]v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllPods", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListAllRBs() (map[string]v1.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllRBs", params, []reflect.Type{reflect.TypeOf((*map[string]v1.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListCMs() (map[string]v10.ConfigMap, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListCMs", params, []reflect.Type{reflect.TypeOf((*map[string]v10.ConfigMap)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.ConfigMap
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.ConfigMap)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListNS() (map[string]v10.Namespace, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNS", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Namespace)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Namespace
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Namespace)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListNodes() ([]v10.Node, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNodes", params, []reflect.Type{reflect.TypeOf((*[]v10.Node)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v10.Node
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v10.Node)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListNodesMetrics(_param0 []v10.Node, _param1 []v1beta1.NodeMetrics, _param2 NodesMetrics) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	pegomock.GetGenericMockFrom(mock).Invoke("ListNodesMetrics", params, []reflect.Type{})
}

func (mock *MockLoader) ListPods() (map[string]v10.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPods", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListPodsMetrics(_param0 []v1beta1.PodMetrics, _param1 PodsMetrics) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0, _param1}
	pegomock.GetGenericMockFrom(mock).Invoke("ListPodsMetrics", params, []reflect.Type{})
}

func (mock *MockLoader) ListRBs() (map[string]v1.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListRBs", params, []reflect.Type{reflect.TypeOf((*map[string]v1.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListSAs() (map[string]v10.ServiceAccount, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListSAs", params, []reflect.Type{reflect.TypeOf((*map[string]v10.ServiceAccount)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.ServiceAccount
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.ServiceAccount)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListSecs() (map[string]v10.Secret, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListSecs", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Secret)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Secret
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Secret)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) ListServices() (map[string]v10.Service, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListServices", params, []reflect.Type{reflect.TypeOf((*map[string]v10.Service)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.Service
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.Service)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockLoader) NodeCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockLoader) NodeMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockLoader) PodCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockLoader) PodMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockLoader) PodsNamespaces(_param0 []string) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{_param0}
	pegomock.GetGenericMockFrom(mock).Invoke("PodsNamespaces", params, []reflect.Type{})
}

func (mock *MockLoader) RestartsLimit() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RestartsLimit", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockLoader) Sections() []string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Sections", params, []reflect.Type{reflect.TypeOf((*[]string)(nil)).Elem()})
	var ret0 []string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]string)
		}
	}
	return ret0
}

func (mock *MockLoader) VerifyWasCalledOnce() *VerifierLoader {
	return &VerifierLoader{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockLoader) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierLoader {
	return &VerifierLoader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockLoader) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierLoader {
	return &VerifierLoader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockLoader) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierLoader {
	return &VerifierLoader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierLoader struct {
	mock                   *MockLoader
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierLoader) ActiveCluster() *Loader_ActiveCluster_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ActiveCluster", params, verifier.timeout)
	return &Loader_ActiveCluster_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ActiveCluster_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ActiveCluster_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ActiveCluster_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ActiveNamespace() *Loader_ActiveNamespace_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ActiveNamespace", params, verifier.timeout)
	return &Loader_ActiveNamespace_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ActiveNamespace_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ActiveNamespace_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ActiveNamespace_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ClusterHasMetrics() *Loader_ClusterHasMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClusterHasMetrics", params, verifier.timeout)
	return &Loader_ClusterHasMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ClusterHasMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ClusterHasMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ClusterHasMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ExcludedNS(_param0 string) *Loader_ExcludedNS_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ExcludedNS", params, verifier.timeout)
	return &Loader_ExcludedNS_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ExcludedNS_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ExcludedNS_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_ExcludedNS_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) ExcludedNode(_param0 string) *Loader_ExcludedNode_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ExcludedNode", params, verifier.timeout)
	return &Loader_ExcludedNode_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ExcludedNode_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ExcludedNode_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_ExcludedNode_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) FetchCMs() *Loader_FetchCMs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchCMs", params, verifier.timeout)
	return &Loader_FetchCMs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchCMs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchCMs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchCMs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchCRBs() *Loader_FetchCRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchCRBs", params, verifier.timeout)
	return &Loader_FetchCRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchCRBs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchCRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchCRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchEPs() *Loader_FetchEPs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchEPs", params, verifier.timeout)
	return &Loader_FetchEPs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchEPs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchEPs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchEPs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchNOs() *Loader_FetchNOs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNOs", params, verifier.timeout)
	return &Loader_FetchNOs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchNOs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchNOs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchNOs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchNSs() *Loader_FetchNSs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNSs", params, verifier.timeout)
	return &Loader_FetchNSs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchNSs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchNSs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchNSs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchNodesMetrics() *Loader_FetchNodesMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNodesMetrics", params, verifier.timeout)
	return &Loader_FetchNodesMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchNodesMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchNodesMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchNodesMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchPOs() *Loader_FetchPOs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPOs", params, verifier.timeout)
	return &Loader_FetchPOs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchPOs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchPOs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchPOs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchPodsMetrics(_param0 string) *Loader_FetchPodsMetrics_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPodsMetrics", params, verifier.timeout)
	return &Loader_FetchPodsMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchPodsMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchPodsMetrics_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_FetchPodsMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) FetchRBs() *Loader_FetchRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchRBs", params, verifier.timeout)
	return &Loader_FetchRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchRBs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchSAs() *Loader_FetchSAs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchSAs", params, verifier.timeout)
	return &Loader_FetchSAs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchSAs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchSAs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchSAs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchSECs() *Loader_FetchSECs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchSECs", params, verifier.timeout)
	return &Loader_FetchSECs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchSECs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchSECs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchSECs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) FetchSVCs() *Loader_FetchSVCs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchSVCs", params, verifier.timeout)
	return &Loader_FetchSVCs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_FetchSVCs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_FetchSVCs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_FetchSVCs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) GetEndpoints(_param0 string) *Loader_GetEndpoints_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetEndpoints", params, verifier.timeout)
	return &Loader_GetEndpoints_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_GetEndpoints_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_GetEndpoints_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_GetEndpoints_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierLoader) GetPod(_param0 map[string]string) *Loader_GetPod_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetPod", params, verifier.timeout)
	return &Loader_GetPod_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_GetPod_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_GetPod_OngoingVerification) GetCapturedArguments() map[string]string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_GetPod_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]map[string]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(map[string]string)
		}
	}
	return
}

func (verifier *VerifierLoader) LinterLevel() *Loader_LinterLevel_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LinterLevel", params, verifier.timeout)
	return &Loader_LinterLevel_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_LinterLevel_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_LinterLevel_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_LinterLevel_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllCRBs() *Loader_ListAllCRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllCRBs", params, verifier.timeout)
	return &Loader_ListAllCRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllCRBs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllCRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllCRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllPods() *Loader_ListAllPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllPods", params, verifier.timeout)
	return &Loader_ListAllPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllPods_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListAllRBs() *Loader_ListAllRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllRBs", params, verifier.timeout)
	return &Loader_ListAllRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListAllRBs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListAllRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListAllRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListCMs() *Loader_ListCMs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListCMs", params, verifier.timeout)
	return &Loader_ListCMs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListCMs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListCMs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListCMs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListNS() *Loader_ListNS_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNS", params, verifier.timeout)
	return &Loader_ListNS_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListNS_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListNS_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListNS_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListNodes() *Loader_ListNodes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNodes", params, verifier.timeout)
	return &Loader_ListNodes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListNodes_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListNodes_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListNodes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListNodesMetrics(_param0 []v10.Node, _param1 []v1beta1.NodeMetrics, _param2 NodesMetrics) *Loader_ListNodesMetrics_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNodesMetrics", params, verifier.timeout)
	return &Loader_ListNodesMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListNodesMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListNodesMetrics_OngoingVerification) GetCapturedArguments() ([]v10.Node, []v1beta1.NodeMetrics, NodesMetrics) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *Loader_ListNodesMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 [][]v10.Node, _param1 [][]v1beta1.NodeMetrics, _param2 []NodesMetrics) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]v10.Node, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]v10.Node)
		}
		_param1 = make([][]v1beta1.NodeMetrics, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.([]v1beta1.NodeMetrics)
		}
		_param2 = make([]NodesMetrics, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(NodesMetrics)
		}
	}
	return
}

func (verifier *VerifierLoader) ListPods() *Loader_ListPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPods", params, verifier.timeout)
	return &Loader_ListPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListPods_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListPodsMetrics(_param0 []v1beta1.PodMetrics, _param1 PodsMetrics) *Loader_ListPodsMetrics_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPodsMetrics", params, verifier.timeout)
	return &Loader_ListPodsMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListPodsMetrics_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListPodsMetrics_OngoingVerification) GetCapturedArguments() ([]v1beta1.PodMetrics, PodsMetrics) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Loader_ListPodsMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 [][]v1beta1.PodMetrics, _param1 []PodsMetrics) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]v1beta1.PodMetrics, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]v1beta1.PodMetrics)
		}
		_param1 = make([]PodsMetrics, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(PodsMetrics)
		}
	}
	return
}

func (verifier *VerifierLoader) ListRBs() *Loader_ListRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListRBs", params, verifier.timeout)
	return &Loader_ListRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListRBs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListSAs() *Loader_ListSAs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListSAs", params, verifier.timeout)
	return &Loader_ListSAs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListSAs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListSAs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListSAs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListSecs() *Loader_ListSecs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListSecs", params, verifier.timeout)
	return &Loader_ListSecs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListSecs_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListSecs_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListSecs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) ListServices() *Loader_ListServices_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListServices", params, verifier.timeout)
	return &Loader_ListServices_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_ListServices_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_ListServices_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_ListServices_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) NodeCPULimit() *Loader_NodeCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeCPULimit", params, verifier.timeout)
	return &Loader_NodeCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_NodeCPULimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_NodeCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_NodeCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) NodeMEMLimit() *Loader_NodeMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeMEMLimit", params, verifier.timeout)
	return &Loader_NodeMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_NodeMEMLimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_NodeMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_NodeMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) PodCPULimit() *Loader_PodCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodCPULimit", params, verifier.timeout)
	return &Loader_PodCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_PodCPULimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_PodCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_PodCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) PodMEMLimit() *Loader_PodMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodMEMLimit", params, verifier.timeout)
	return &Loader_PodMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_PodMEMLimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_PodMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_PodMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) PodsNamespaces(_param0 []string) *Loader_PodsNamespaces_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodsNamespaces", params, verifier.timeout)
	return &Loader_PodsNamespaces_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_PodsNamespaces_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_PodsNamespaces_OngoingVerification) GetCapturedArguments() []string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Loader_PodsNamespaces_OngoingVerification) GetAllCapturedArguments() (_param0 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]string)
		}
	}
	return
}

func (verifier *VerifierLoader) RestartsLimit() *Loader_RestartsLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RestartsLimit", params, verifier.timeout)
	return &Loader_RestartsLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_RestartsLimit_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_RestartsLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_RestartsLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierLoader) Sections() *Loader_Sections_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Sections", params, verifier.timeout)
	return &Loader_Sections_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Loader_Sections_OngoingVerification struct {
	mock              *MockLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Loader_Sections_OngoingVerification) GetCapturedArguments() {
}

func (c *Loader_Sections_OngoingVerification) GetAllCapturedArguments() {
}
