// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/derailed/popeye/internal/linter (interfaces: Client)

package linter

import (
	pegomock "github.com/petergtz/pegomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/rbac/v1"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
	"reflect"
	"time"
)

type MockClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockClient() *MockClient {
	return &MockClient{fail: pegomock.GlobalFailHandler}
}

func (mock *MockClient) ActiveNamespace() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ActiveNamespace", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockClient) ClusterHasMetrics() bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ClusterHasMetrics", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockClient) ExcludedNS(_param0 string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ExcludedNS", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockClient) FetchNodesMetrics() ([]v1beta1.NodeMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNodesMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.NodeMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.NodeMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.NodeMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) FetchPodsMetrics(_param0 string) ([]v1beta1.PodMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPodsMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.PodMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.PodMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.PodMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) GetEndpoints(_param0 string) (*v1.Endpoints, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetEndpoints", params, []reflect.Type{reflect.TypeOf((**v1.Endpoints)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.Endpoints
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.Endpoints)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) GetPod(_param0 map[string]string) (*v1.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetPod", params, []reflect.Type{reflect.TypeOf((**v1.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) InUseNamespaces(_param0 []string) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{_param0}
	pegomock.GetGenericMockFrom(mock).Invoke("InUseNamespaces", params, []reflect.Type{})
}

func (mock *MockClient) ListAllCMs() (map[string]v1.ConfigMap, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllCMs", params, []reflect.Type{reflect.TypeOf((*map[string]v1.ConfigMap)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.ConfigMap
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.ConfigMap)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListAllCRBs() (map[string]v10.ClusterRoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllCRBs", params, []reflect.Type{reflect.TypeOf((*map[string]v10.ClusterRoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.ClusterRoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.ClusterRoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListAllNS() (map[string]v1.Namespace, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllNS", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Namespace)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Namespace
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Namespace)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListAllPods() (map[string]v1.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllPods", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListAllRBs() (map[string]v10.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListAllRBs", params, []reflect.Type{reflect.TypeOf((*map[string]v10.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListCMs() (map[string]v1.ConfigMap, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListCMs", params, []reflect.Type{reflect.TypeOf((*map[string]v1.ConfigMap)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.ConfigMap
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.ConfigMap)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListEndpoints() (map[string]v1.Endpoints, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListEndpoints", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Endpoints)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Endpoints
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Endpoints)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListNS() (map[string]v1.Namespace, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNS", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Namespace)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Namespace
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Namespace)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListNodes() ([]v1.Node, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListNodes", params, []reflect.Type{reflect.TypeOf((*[]v1.Node)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1.Node
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1.Node)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListPods() (map[string]v1.Pod, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListPods", params, []reflect.Type{reflect.TypeOf((*map[string]v1.Pod)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v1.Pod
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v1.Pod)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListRBs() (map[string]v10.RoleBinding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListRBs", params, []reflect.Type{reflect.TypeOf((*map[string]v10.RoleBinding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]v10.RoleBinding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]v10.RoleBinding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) ListServices() ([]v1.Service, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListServices", params, []reflect.Type{reflect.TypeOf((*[]v1.Service)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1.Service
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1.Service)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockClient) NodeCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockClient) NodeMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockClient) PodCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockClient) PodMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockClient) RestartsLimit() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RestartsLimit", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockClient) VerifyWasCalledOnce() *VerifierClient {
	return &VerifierClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockClient) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierClient {
	return &VerifierClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierClient {
	return &VerifierClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierClient {
	return &VerifierClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierClient struct {
	mock                   *MockClient
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierClient) ActiveNamespace() *Client_ActiveNamespace_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ActiveNamespace", params, verifier.timeout)
	return &Client_ActiveNamespace_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ActiveNamespace_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ActiveNamespace_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ActiveNamespace_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ClusterHasMetrics() *Client_ClusterHasMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClusterHasMetrics", params, verifier.timeout)
	return &Client_ClusterHasMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ClusterHasMetrics_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ClusterHasMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ClusterHasMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ExcludedNS(_param0 string) *Client_ExcludedNS_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ExcludedNS", params, verifier.timeout)
	return &Client_ExcludedNS_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ExcludedNS_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ExcludedNS_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Client_ExcludedNS_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierClient) FetchNodesMetrics() *Client_FetchNodesMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNodesMetrics", params, verifier.timeout)
	return &Client_FetchNodesMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_FetchNodesMetrics_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_FetchNodesMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_FetchNodesMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) FetchPodsMetrics(_param0 string) *Client_FetchPodsMetrics_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPodsMetrics", params, verifier.timeout)
	return &Client_FetchPodsMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_FetchPodsMetrics_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_FetchPodsMetrics_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Client_FetchPodsMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierClient) GetEndpoints(_param0 string) *Client_GetEndpoints_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetEndpoints", params, verifier.timeout)
	return &Client_GetEndpoints_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_GetEndpoints_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_GetEndpoints_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Client_GetEndpoints_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierClient) GetPod(_param0 map[string]string) *Client_GetPod_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetPod", params, verifier.timeout)
	return &Client_GetPod_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_GetPod_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_GetPod_OngoingVerification) GetCapturedArguments() map[string]string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Client_GetPod_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]map[string]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(map[string]string)
		}
	}
	return
}

func (verifier *VerifierClient) InUseNamespaces(_param0 []string) *Client_InUseNamespaces_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "InUseNamespaces", params, verifier.timeout)
	return &Client_InUseNamespaces_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_InUseNamespaces_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_InUseNamespaces_OngoingVerification) GetCapturedArguments() []string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Client_InUseNamespaces_OngoingVerification) GetAllCapturedArguments() (_param0 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]string)
		}
	}
	return
}

func (verifier *VerifierClient) ListAllCMs() *Client_ListAllCMs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllCMs", params, verifier.timeout)
	return &Client_ListAllCMs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListAllCMs_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListAllCMs_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListAllCMs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListAllCRBs() *Client_ListAllCRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllCRBs", params, verifier.timeout)
	return &Client_ListAllCRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListAllCRBs_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListAllCRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListAllCRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListAllNS() *Client_ListAllNS_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllNS", params, verifier.timeout)
	return &Client_ListAllNS_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListAllNS_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListAllNS_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListAllNS_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListAllPods() *Client_ListAllPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllPods", params, verifier.timeout)
	return &Client_ListAllPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListAllPods_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListAllPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListAllPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListAllRBs() *Client_ListAllRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListAllRBs", params, verifier.timeout)
	return &Client_ListAllRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListAllRBs_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListAllRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListAllRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListCMs() *Client_ListCMs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListCMs", params, verifier.timeout)
	return &Client_ListCMs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListCMs_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListCMs_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListCMs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListEndpoints() *Client_ListEndpoints_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListEndpoints", params, verifier.timeout)
	return &Client_ListEndpoints_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListEndpoints_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListEndpoints_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListEndpoints_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListNS() *Client_ListNS_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNS", params, verifier.timeout)
	return &Client_ListNS_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListNS_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListNS_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListNS_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListNodes() *Client_ListNodes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListNodes", params, verifier.timeout)
	return &Client_ListNodes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListNodes_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListNodes_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListNodes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListPods() *Client_ListPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListPods", params, verifier.timeout)
	return &Client_ListPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListPods_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListRBs() *Client_ListRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListRBs", params, verifier.timeout)
	return &Client_ListRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListRBs_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) ListServices() *Client_ListServices_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListServices", params, verifier.timeout)
	return &Client_ListServices_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_ListServices_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_ListServices_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_ListServices_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) NodeCPULimit() *Client_NodeCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeCPULimit", params, verifier.timeout)
	return &Client_NodeCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_NodeCPULimit_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_NodeCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_NodeCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) NodeMEMLimit() *Client_NodeMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeMEMLimit", params, verifier.timeout)
	return &Client_NodeMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_NodeMEMLimit_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_NodeMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_NodeMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) PodCPULimit() *Client_PodCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodCPULimit", params, verifier.timeout)
	return &Client_PodCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_PodCPULimit_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_PodCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_PodCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) PodMEMLimit() *Client_PodMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodMEMLimit", params, verifier.timeout)
	return &Client_PodMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_PodMEMLimit_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_PodMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_PodMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierClient) RestartsLimit() *Client_RestartsLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RestartsLimit", params, verifier.timeout)
	return &Client_RestartsLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Client_RestartsLimit_OngoingVerification struct {
	mock              *MockClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *Client_RestartsLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Client_RestartsLimit_OngoingVerification) GetAllCapturedArguments() {
}
