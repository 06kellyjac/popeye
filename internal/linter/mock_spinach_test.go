// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/derailed/popeye/internal/linter (interfaces: Spinach)

package linter

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockSpinach struct {
	fail func(message string, callerSkip ...int)
}

func NewMockSpinach() *MockSpinach {
	return &MockSpinach{fail: pegomock.GlobalFailHandler}
}

func (mock *MockSpinach) ExcludedNS(_param0 string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSpinach().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ExcludedNS", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockSpinach) ExcludedNode(_param0 string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSpinach().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ExcludedNode", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockSpinach) LinterLevel() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSpinach().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("LinterLevel", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockSpinach) NodeCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSpinach().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockSpinach) NodeMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSpinach().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NodeMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockSpinach) PodCPULimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSpinach().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodCPULimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockSpinach) PodMEMLimit() float64 {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSpinach().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PodMEMLimit", params, []reflect.Type{reflect.TypeOf((*float64)(nil)).Elem()})
	var ret0 float64
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(float64)
		}
	}
	return ret0
}

func (mock *MockSpinach) RestartsLimit() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSpinach().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RestartsLimit", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockSpinach) Sections() []string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSpinach().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Sections", params, []reflect.Type{reflect.TypeOf((*[]string)(nil)).Elem()})
	var ret0 []string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]string)
		}
	}
	return ret0
}

func (mock *MockSpinach) VerifyWasCalledOnce() *VerifierSpinach {
	return &VerifierSpinach{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockSpinach) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierSpinach {
	return &VerifierSpinach{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockSpinach) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierSpinach {
	return &VerifierSpinach{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockSpinach) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierSpinach {
	return &VerifierSpinach{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierSpinach struct {
	mock                   *MockSpinach
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierSpinach) ExcludedNS(_param0 string) *Spinach_ExcludedNS_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ExcludedNS", params, verifier.timeout)
	return &Spinach_ExcludedNS_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Spinach_ExcludedNS_OngoingVerification struct {
	mock              *MockSpinach
	methodInvocations []pegomock.MethodInvocation
}

func (c *Spinach_ExcludedNS_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Spinach_ExcludedNS_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierSpinach) ExcludedNode(_param0 string) *Spinach_ExcludedNode_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ExcludedNode", params, verifier.timeout)
	return &Spinach_ExcludedNode_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Spinach_ExcludedNode_OngoingVerification struct {
	mock              *MockSpinach
	methodInvocations []pegomock.MethodInvocation
}

func (c *Spinach_ExcludedNode_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Spinach_ExcludedNode_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierSpinach) LinterLevel() *Spinach_LinterLevel_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LinterLevel", params, verifier.timeout)
	return &Spinach_LinterLevel_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Spinach_LinterLevel_OngoingVerification struct {
	mock              *MockSpinach
	methodInvocations []pegomock.MethodInvocation
}

func (c *Spinach_LinterLevel_OngoingVerification) GetCapturedArguments() {
}

func (c *Spinach_LinterLevel_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierSpinach) NodeCPULimit() *Spinach_NodeCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeCPULimit", params, verifier.timeout)
	return &Spinach_NodeCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Spinach_NodeCPULimit_OngoingVerification struct {
	mock              *MockSpinach
	methodInvocations []pegomock.MethodInvocation
}

func (c *Spinach_NodeCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Spinach_NodeCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierSpinach) NodeMEMLimit() *Spinach_NodeMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NodeMEMLimit", params, verifier.timeout)
	return &Spinach_NodeMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Spinach_NodeMEMLimit_OngoingVerification struct {
	mock              *MockSpinach
	methodInvocations []pegomock.MethodInvocation
}

func (c *Spinach_NodeMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Spinach_NodeMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierSpinach) PodCPULimit() *Spinach_PodCPULimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodCPULimit", params, verifier.timeout)
	return &Spinach_PodCPULimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Spinach_PodCPULimit_OngoingVerification struct {
	mock              *MockSpinach
	methodInvocations []pegomock.MethodInvocation
}

func (c *Spinach_PodCPULimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Spinach_PodCPULimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierSpinach) PodMEMLimit() *Spinach_PodMEMLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PodMEMLimit", params, verifier.timeout)
	return &Spinach_PodMEMLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Spinach_PodMEMLimit_OngoingVerification struct {
	mock              *MockSpinach
	methodInvocations []pegomock.MethodInvocation
}

func (c *Spinach_PodMEMLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Spinach_PodMEMLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierSpinach) RestartsLimit() *Spinach_RestartsLimit_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RestartsLimit", params, verifier.timeout)
	return &Spinach_RestartsLimit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Spinach_RestartsLimit_OngoingVerification struct {
	mock              *MockSpinach
	methodInvocations []pegomock.MethodInvocation
}

func (c *Spinach_RestartsLimit_OngoingVerification) GetCapturedArguments() {
}

func (c *Spinach_RestartsLimit_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierSpinach) Sections() *Spinach_Sections_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Sections", params, verifier.timeout)
	return &Spinach_Sections_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Spinach_Sections_OngoingVerification struct {
	mock              *MockSpinach
	methodInvocations []pegomock.MethodInvocation
}

func (c *Spinach_Sections_OngoingVerification) GetCapturedArguments() {
}

func (c *Spinach_Sections_OngoingVerification) GetAllCapturedArguments() {
}
