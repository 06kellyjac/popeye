// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/derailed/popeye/internal/linter (interfaces: Fetcher)

package linter

import (
	"reflect"
	"time"

	pegomock "github.com/petergtz/pegomock"
	v10 "k8s.io/api/core/v1"
	v1 "k8s.io/api/rbac/v1"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
)

type MockFetcher struct {
	fail func(message string, callerSkip ...int)
}

func NewMockFetcher() *MockFetcher {
	return &MockFetcher{fail: pegomock.GlobalFailHandler}
}

func (mock *MockFetcher) ActiveCluster() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ActiveCluster", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockFetcher) ActiveNamespace() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ActiveNamespace", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockFetcher) ClusterHasMetrics() (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ClusterHasMetrics", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchClusterRoleBindings() (*v1.ClusterRoleBindingList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchClusterRoleBindings", params, []reflect.Type{reflect.TypeOf((**v1.ClusterRoleBindingList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.ClusterRoleBindingList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.ClusterRoleBindingList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchConfigMaps() (*v10.ConfigMapList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchConfigMaps", params, []reflect.Type{reflect.TypeOf((**v10.ConfigMapList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ConfigMapList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ConfigMapList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchEndpoints() (*v10.EndpointsList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchEndpoints", params, []reflect.Type{reflect.TypeOf((**v10.EndpointsList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.EndpointsList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.EndpointsList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchNamespaces() (*v10.NamespaceList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNamespaces", params, []reflect.Type{reflect.TypeOf((**v10.NamespaceList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.NamespaceList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.NamespaceList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchNodes() (*v10.NodeList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNodes", params, []reflect.Type{reflect.TypeOf((**v10.NodeList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.NodeList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.NodeList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchNodesMetrics() ([]v1beta1.NodeMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNodesMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.NodeMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.NodeMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.NodeMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchPods() (*v10.PodList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPods", params, []reflect.Type{reflect.TypeOf((**v10.PodList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.PodList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.PodList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchPodsMetrics(_param0 string) ([]v1beta1.PodMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPodsMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.PodMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.PodMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.PodMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchRoleBindings() (*v1.RoleBindingList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchRoleBindings", params, []reflect.Type{reflect.TypeOf((**v1.RoleBindingList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.RoleBindingList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.RoleBindingList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchSecrets() (*v10.SecretList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchSecrets", params, []reflect.Type{reflect.TypeOf((**v10.SecretList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.SecretList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.SecretList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchServiceAccounts() (*v10.ServiceAccountList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchServiceAccounts", params, []reflect.Type{reflect.TypeOf((**v10.ServiceAccountList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ServiceAccountList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ServiceAccountList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchServices() (*v10.ServiceList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchServices", params, []reflect.Type{reflect.TypeOf((**v10.ServiceList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ServiceList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ServiceList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) VerifyWasCalledOnce() *VerifierFetcher {
	return &VerifierFetcher{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockFetcher) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierFetcher {
	return &VerifierFetcher{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockFetcher) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierFetcher {
	return &VerifierFetcher{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockFetcher) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierFetcher {
	return &VerifierFetcher{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierFetcher struct {
	mock                   *MockFetcher
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierFetcher) ActiveCluster() *Fetcher_ActiveCluster_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ActiveCluster", params, verifier.timeout)
	return &Fetcher_ActiveCluster_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_ActiveCluster_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_ActiveCluster_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_ActiveCluster_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) ActiveNamespace() *Fetcher_ActiveNamespace_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ActiveNamespace", params, verifier.timeout)
	return &Fetcher_ActiveNamespace_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_ActiveNamespace_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_ActiveNamespace_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_ActiveNamespace_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) ClusterHasMetrics() *Fetcher_ClusterHasMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClusterHasMetrics", params, verifier.timeout)
	return &Fetcher_ClusterHasMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_ClusterHasMetrics_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_ClusterHasMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_ClusterHasMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchClusterRoleBindings() *Fetcher_FetchClusterRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchClusterRoleBindings", params, verifier.timeout)
	return &Fetcher_FetchClusterRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchClusterRoleBindings_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchClusterRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchClusterRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchConfigMaps() *Fetcher_FetchConfigMaps_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchConfigMaps", params, verifier.timeout)
	return &Fetcher_FetchConfigMaps_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchConfigMaps_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchConfigMaps_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchConfigMaps_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchEndpoints() *Fetcher_FetchEndpoints_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchEndpoints", params, verifier.timeout)
	return &Fetcher_FetchEndpoints_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchEndpoints_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchEndpoints_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchEndpoints_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchNamespaces() *Fetcher_FetchNamespaces_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNamespaces", params, verifier.timeout)
	return &Fetcher_FetchNamespaces_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchNamespaces_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchNamespaces_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchNamespaces_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchNodes() *Fetcher_FetchNodes_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNodes", params, verifier.timeout)
	return &Fetcher_FetchNodes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchNodes_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchNodes_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchNodes_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchNodesMetrics() *Fetcher_FetchNodesMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNodesMetrics", params, verifier.timeout)
	return &Fetcher_FetchNodesMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchNodesMetrics_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchNodesMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchNodesMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchPods() *Fetcher_FetchPods_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPods", params, verifier.timeout)
	return &Fetcher_FetchPods_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchPods_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchPods_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchPods_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchPodsMetrics(_param0 string) *Fetcher_FetchPodsMetrics_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPodsMetrics", params, verifier.timeout)
	return &Fetcher_FetchPodsMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchPodsMetrics_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchPodsMetrics_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Fetcher_FetchPodsMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierFetcher) FetchRoleBindings() *Fetcher_FetchRoleBindings_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchRoleBindings", params, verifier.timeout)
	return &Fetcher_FetchRoleBindings_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchRoleBindings_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchRoleBindings_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchRoleBindings_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchSecrets() *Fetcher_FetchSecrets_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchSecrets", params, verifier.timeout)
	return &Fetcher_FetchSecrets_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchSecrets_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchSecrets_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchSecrets_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchServiceAccounts() *Fetcher_FetchServiceAccounts_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchServiceAccounts", params, verifier.timeout)
	return &Fetcher_FetchServiceAccounts_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchServiceAccounts_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchServiceAccounts_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchServiceAccounts_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchServices() *Fetcher_FetchServices_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchServices", params, verifier.timeout)
	return &Fetcher_FetchServices_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchServices_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchServices_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchServices_OngoingVerification) GetAllCapturedArguments() {
}
