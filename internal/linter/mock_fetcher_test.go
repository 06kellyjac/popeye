// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/derailed/popeye/internal/linter (interfaces: Fetcher)

package linter

import (
	pegomock "github.com/petergtz/pegomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/rbac/v1"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
	"reflect"
	"time"
)

type MockFetcher struct {
	fail func(message string, callerSkip ...int)
}

func NewMockFetcher() *MockFetcher {
	return &MockFetcher{fail: pegomock.GlobalFailHandler}
}

func (mock *MockFetcher) ClusterHasMetrics() (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ClusterHasMetrics", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchCMs() (*v1.ConfigMapList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchCMs", params, []reflect.Type{reflect.TypeOf((**v1.ConfigMapList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.ConfigMapList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.ConfigMapList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchCRBs() (*v10.ClusterRoleBindingList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchCRBs", params, []reflect.Type{reflect.TypeOf((**v10.ClusterRoleBindingList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.ClusterRoleBindingList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.ClusterRoleBindingList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchEPs() (*v1.EndpointsList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchEPs", params, []reflect.Type{reflect.TypeOf((**v1.EndpointsList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.EndpointsList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.EndpointsList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchNOs() (*v1.NodeList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNOs", params, []reflect.Type{reflect.TypeOf((**v1.NodeList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.NodeList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.NodeList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchNSs() (*v1.NamespaceList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNSs", params, []reflect.Type{reflect.TypeOf((**v1.NamespaceList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.NamespaceList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.NamespaceList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchNodesMetrics() ([]v1beta1.NodeMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchNodesMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.NodeMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.NodeMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.NodeMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchPOs() (*v1.PodList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPOs", params, []reflect.Type{reflect.TypeOf((**v1.PodList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.PodList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.PodList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchPodsMetrics(_param0 string) ([]v1beta1.PodMetrics, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchPodsMetrics", params, []reflect.Type{reflect.TypeOf((*[]v1beta1.PodMetrics)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []v1beta1.PodMetrics
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]v1beta1.PodMetrics)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchRBs() (*v10.RoleBindingList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchRBs", params, []reflect.Type{reflect.TypeOf((**v10.RoleBindingList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v10.RoleBindingList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v10.RoleBindingList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchSAs() (*v1.ServiceAccountList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchSAs", params, []reflect.Type{reflect.TypeOf((**v1.ServiceAccountList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.ServiceAccountList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.ServiceAccountList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchSECs() (*v1.SecretList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchSECs", params, []reflect.Type{reflect.TypeOf((**v1.SecretList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.SecretList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.SecretList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) FetchSVCs() (*v1.ServiceList, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockFetcher().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FetchSVCs", params, []reflect.Type{reflect.TypeOf((**v1.ServiceList)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *v1.ServiceList
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*v1.ServiceList)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFetcher) VerifyWasCalledOnce() *VerifierFetcher {
	return &VerifierFetcher{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockFetcher) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierFetcher {
	return &VerifierFetcher{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockFetcher) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierFetcher {
	return &VerifierFetcher{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockFetcher) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierFetcher {
	return &VerifierFetcher{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierFetcher struct {
	mock                   *MockFetcher
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierFetcher) ClusterHasMetrics() *Fetcher_ClusterHasMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClusterHasMetrics", params, verifier.timeout)
	return &Fetcher_ClusterHasMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_ClusterHasMetrics_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_ClusterHasMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_ClusterHasMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchCMs() *Fetcher_FetchCMs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchCMs", params, verifier.timeout)
	return &Fetcher_FetchCMs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchCMs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchCMs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchCMs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchCRBs() *Fetcher_FetchCRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchCRBs", params, verifier.timeout)
	return &Fetcher_FetchCRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchCRBs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchCRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchCRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchEPs() *Fetcher_FetchEPs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchEPs", params, verifier.timeout)
	return &Fetcher_FetchEPs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchEPs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchEPs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchEPs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchNOs() *Fetcher_FetchNOs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNOs", params, verifier.timeout)
	return &Fetcher_FetchNOs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchNOs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchNOs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchNOs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchNSs() *Fetcher_FetchNSs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNSs", params, verifier.timeout)
	return &Fetcher_FetchNSs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchNSs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchNSs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchNSs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchNodesMetrics() *Fetcher_FetchNodesMetrics_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchNodesMetrics", params, verifier.timeout)
	return &Fetcher_FetchNodesMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchNodesMetrics_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchNodesMetrics_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchNodesMetrics_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchPOs() *Fetcher_FetchPOs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPOs", params, verifier.timeout)
	return &Fetcher_FetchPOs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchPOs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchPOs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchPOs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchPodsMetrics(_param0 string) *Fetcher_FetchPodsMetrics_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchPodsMetrics", params, verifier.timeout)
	return &Fetcher_FetchPodsMetrics_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchPodsMetrics_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchPodsMetrics_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Fetcher_FetchPodsMetrics_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierFetcher) FetchRBs() *Fetcher_FetchRBs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchRBs", params, verifier.timeout)
	return &Fetcher_FetchRBs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchRBs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchRBs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchRBs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchSAs() *Fetcher_FetchSAs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchSAs", params, verifier.timeout)
	return &Fetcher_FetchSAs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchSAs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchSAs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchSAs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchSECs() *Fetcher_FetchSECs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchSECs", params, verifier.timeout)
	return &Fetcher_FetchSECs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchSECs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchSECs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchSECs_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFetcher) FetchSVCs() *Fetcher_FetchSVCs_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FetchSVCs", params, verifier.timeout)
	return &Fetcher_FetchSVCs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fetcher_FetchSVCs_OngoingVerification struct {
	mock              *MockFetcher
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fetcher_FetchSVCs_OngoingVerification) GetCapturedArguments() {
}

func (c *Fetcher_FetchSVCs_OngoingVerification) GetAllCapturedArguments() {
}
